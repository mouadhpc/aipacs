name: Deploy

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ secrets.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_REGISTRY }}/ai-pacs:latest
          ${{ secrets.DOCKER_REGISTRY }}/ai-pacs:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Deploy to environment
      run: |
        echo "üöÄ D√©ploiement vers ${{ github.event.inputs.environment || 'production' }}"
        # Ici on ajouterait les commandes de d√©ploiement
        # Par exemple: kubectl apply, docker-compose, etc.
    
    - name: Run health checks
      run: |
        echo "üè• V√©rification de l'√©tat de l'application..."
        # Tests de sant√© post-d√©ploiement
        sleep 30
        curl -f http://localhost:8000/health || exit 1
    
    - name: Notify deployment
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ D√©ploiement r√©ussi"
        else
          echo "‚ùå √âchec du d√©ploiement"
        fi
