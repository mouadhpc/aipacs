# Middlewares personnalis√©s pour l'API
import time
import logging
from fastapi import FastAPI, Request, Response
from fastapi.middleware.base import BaseHTTPMiddleware
from starlette.middleware.sessions import SessionMiddleware
from starlette.middleware.gzip import GZipMiddleware
from typing import Callable

from ..config.settings import settings

logger = logging.getLogger(__name__)

class LoggingMiddleware(BaseHTTPMiddleware):
    """Middleware pour le logging des requ√™tes"""
    
    async def dispatch(self, request: Request, call_next: Callable) -> Response:
        start_time = time.time()
        
        # Log de la requ√™te entrante
        logger.info(f"üîç {request.method} {request.url.path} - Client: {request.client.host if request.client else 'Unknown'}")
        
        # Traitement de la requ√™te
        response = await call_next(request)
        
        # Calcul du temps de traitement
        process_time = time.time() - start_time
        
        # Log de la r√©ponse
        logger.info(f"‚úÖ {request.method} {request.url.path} - Status: {response.status_code} - Time: {process_time:.3f}s")
        
        # Ajout du header de temps de traitement
        response.headers["X-Process-Time"] = str(process_time)
        
        return response

class SecurityHeadersMiddleware(BaseHTTPMiddleware):
    """Middleware pour ajouter les headers de s√©curit√©"""
    
    async def dispatch(self, request: Request, call_next: Callable) -> Response:
        response = await call_next(request)
        
        # Ajout des headers de s√©curit√©
        response.headers["X-Content-Type-Options"] = "nosniff"
        response.headers["X-Frame-Options"] = "DENY"
        response.headers["X-XSS-Protection"] = "1; mode=block"
        response.headers["Strict-Transport-Security"] = "max-age=31536000; includeSubDomains"
        
        return response

def setup_middleware(app: FastAPI) -> None:
    """Configuration de tous les middlewares"""
    
    # Middleware de compression GZIP
    app.add_middleware(GZipMiddleware, minimum_size=1000)
    
    # Middleware de session (si n√©cessaire pour l'authentification)
    app.add_middleware(
        SessionMiddleware,
        secret_key=settings.secret_key,
        max_age=settings.access_token_expire_minutes * 60
    )
    
    # Middlewares personnalis√©s
    app.add_middleware(SecurityHeadersMiddleware)
    app.add_middleware(LoggingMiddleware)
    
    logger.info("üîß Middlewares configur√©s avec succ√®s")
