# Worker pour le traitement IA en arri√®re-plan
import asyncio
import logging
import sys
from pathlib import Path

# Ajout du r√©pertoire src au path
sys.path.insert(0, str(Path(__file__).parent.parent))

from config.settings import settings
from ai_engine.processor import AIProcessor

logger = logging.getLogger(__name__)

class AIWorker:
    """Worker pour le traitement des t√¢ches IA en arri√®re-plan"""
    
    def __init__(self):
        self.ai_processor = AIProcessor()
        self.running = False
        
    async def start(self):
        """D√©marrage du worker"""
        logger.info("ü§ñ D√©marrage du worker IA...")
        
        # Chargement du mod√®le IA
        await self.ai_processor.load_model()
        
        self.running = True
        logger.info("‚úÖ Worker IA d√©marr√© et pr√™t")
        
        # Boucle principale du worker
        while self.running:
            try:
                # Ici on traiterait les t√¢ches en file d'attente
                # En production, on utiliserait Redis/Celery
                await asyncio.sleep(5)
                logger.debug("Worker IA en attente...")
                
            except Exception as e:
                logger.error(f"Erreur dans le worker IA: {e}")
                await asyncio.sleep(10)
    
    def stop(self):
        """Arr√™t du worker"""
        logger.info("üõë Arr√™t du worker IA...")
        self.running = False

async def main():
    """Point d'entr√©e du worker"""
    # Configuration du logging
    logging.basicConfig(
        level=getattr(logging, settings.log_level.upper()),
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    worker = AIWorker()
    try:
        await worker.start()
    except KeyboardInterrupt:
        worker.stop()
        logger.info("Worker IA arr√™t√© par l'utilisateur")

if __name__ == "__main__":
    asyncio.run(main())
