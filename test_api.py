#!/usr/bin/env python3
"""
Script de test pour v√©rifier tous les endpoints de l'API AI PACS
"""

import requests
import json
from datetime import datetime

BASE_URL = "http://127.0.0.1:8000"

def test_endpoint(method, endpoint, description, data=None):
    """Teste un endpoint et affiche le r√©sultat"""
    url = f"{BASE_URL}{endpoint}"
    
    try:
        if method.upper() == "GET":
            response = requests.get(url)
        elif method.upper() == "POST":
            response = requests.post(url, json=data if data else {})
        
        if response.status_code == 200:
            print(f"‚úÖ {description}")
            print(f"   URL: {endpoint}")
            result = response.json()
            if isinstance(result, dict) and 'status' in result:
                print(f"   Status: {result['status']}")
            print()
            return True
        else:
            print(f"‚ùå {description}")
            print(f"   URL: {endpoint}")
            print(f"   Status Code: {response.status_code}")
            print()
            return False
    except Exception as e:
        print(f"‚ùå {description}")
        print(f"   URL: {endpoint}")
        print(f"   Erreur: {e}")
        print()
        return False

def main():
    print("üß™ Test des Endpoints AI PACS")
    print("=" * 60)
    
    # Test de connectivit√©
    try:
        response = requests.get(f"{BASE_URL}/health", timeout=5)
        if response.status_code != 200:
            print("‚ùå Serveur non accessible. Assurez-vous que python app_dev.py est lanc√©.")
            return
    except:
        print("‚ùå Serveur non accessible. Assurez-vous que python app_dev.py est lanc√©.")
        return
    
    success_count = 0
    total_count = 0
    
    # Tests des endpoints
    endpoints = [
        ("GET", "/", "Page d'accueil"),
        ("GET", "/health", "Health check"),
        ("GET", "/api/v1/dicom/status", "Statut serveur DICOM"),
        ("GET", "/api/v1/dicom/connections", "Connexions DICOM"),
        ("POST", "/api/v1/dicom/test-connection", "Test connexion PACS"),
        ("GET", "/api/v1/dicom/received-studies", "√âtudes re√ßues"),
        ("GET", "/api/v1/dicom/statistics", "Statistiques DICOM"),
        ("GET", "/api/v1/ai/models", "Mod√®les IA disponibles"),
        ("POST", "/api/v1/ai/analyze?file_id=test123", "Analyse IA", {"file_id": "test123"}),
        ("GET", "/api/v1/ai/status", "Statut moteur IA"),
        ("GET", "/api/v1/reports/", "Liste des rapports"),
        ("GET", "/api/v1/reports/1", "Rapport sp√©cifique"),
        ("GET", "/api/v1/reports/statistics/summary", "Statistiques rapports"),
        ("GET", "/api/v1/monitoring/health", "Monitoring sant√©"),
        ("GET", "/api/v1/monitoring/metrics", "M√©triques syst√®me"),
    ]
    
    for method, endpoint, description, *data in endpoints:
        total_count += 1
        data = data[0] if data else None
        if test_endpoint(method, endpoint, description, data):
            success_count += 1
    
    print("=" * 60)
    print(f"üìä R√©sultats des tests: {success_count}/{total_count} endpoints fonctionnels")
    
    if success_count == total_count:
        print("üéâ Tous les endpoints fonctionnent parfaitement !")
        print("\nüåê Acc√®s √† l'application :")
        print(f"   ‚Ä¢ API: {BASE_URL}")
        print(f"   ‚Ä¢ Documentation: {BASE_URL}/api/v1/docs")
        print(f"   ‚Ä¢ Health Check: {BASE_URL}/health")
    else:
        print("‚ö†Ô∏è  Certains endpoints ont des probl√®mes.")
        print("V√©rifiez les logs du serveur pour plus de d√©tails.")
    
    print("\nüõ†Ô∏è  Fonctionnalit√©s disponibles :")
    print("   ‚úÖ API REST compl√®te (15+ endpoints)")
    print("   ‚úÖ Gestion DICOM (statut, connexions, √©tudes)")
    print("   ‚úÖ Moteur IA (mod√®les, analyse, statut)")
    print("   ‚úÖ Rapports (g√©n√©ration, consultation, stats)")
    print("   ‚úÖ Monitoring (sant√©, m√©triques syst√®me)")
    print("   ‚úÖ Documentation interactive (Swagger)")

if __name__ == "__main__":
    main()
